############################################################################
## Packages / Occupancy
##
## Inspired by a post by @Tomahawk in the community thread:
## https://community.home-assistant.io/t/55934/8
############################################################################

homeassistant:
  customize:

    ########################################################################
    ## Node Anchors
    ########################################################################

    package.node_anchors:
      customize: &customize
        package: 'occupancy'

    ########################################################################
    ## Binary Sensor
    ########################################################################

    binary_sensor.occupancy:
      friendly_name: Bezetting

    ########################################################################
    ## Input Boolean
    ########################################################################

    input_boolean.occupancy_home:
      friendly_name: Thuis
      icon: mdi:home-account

    input_boolean.occupancy_away:
      friendly_name: Weg
      icon: mdi:exit-run

    input_boolean.occupancy_asleep:
      friendly_name: Slapend
      icon: mdi:sleep

    input_boolean.occupancy_vacation:
      friendly_name: Vakantie
      icon: mdi:airplane-takeoff

    ########################################################################
    ## Sensor
    ########################################################################

    sensor.occupancy:
      friendly_name: Bezetting

    ########################################################################
    ## Automation
    ########################################################################

    automation.occupancy_sync:
      friendly_name: Synchroniseer Bezetting

############################################################################
## Input Boolean
## https://www.home-assistant.io/components/input_boolean/
## State is restored when no initial value is set
############################################################################

input_boolean:
  occupancy_home:
  occupancy_away:
  occupancy_asleep:
  occupancy_vacation:

############################################################################
## Sensor
############################################################################

sensor:
  - platform: template
    sensors:
      occupancy:
        friendly_name: "Occupancy"
        entity_id: 
          - input_boolean.occupancy_home
          - input_boolean.occupancy_away
          - input_boolean.occupancy_asleep
          - input_boolean.occupancy_vacation
        value_template: >-
          {% if is_state('input_boolean.occupancy_home', 'on') %}
              home
          {% elif is_state('input_boolean.occupancy_away', 'on') %}
              away
          {% elif is_state('input_boolean.occupancy_asleep', 'on') %}
            asleep
          {% elif is_state('input_boolean.occupancy_vacation', 'on') %}
            vacation
          {% endif %}
        icon_template: >-
          {% if is_state('input_boolean.occupancy_home', 'on') %}
            mdi:home-account
          {% elif is_state('input_boolean.occupancy_away', 'on') %}
            mdi:exit-run
          {% elif is_state('input_boolean.occupancy_asleep', 'on') %}
            mdi:sleep
          {% elif is_state('input_boolean.occupancy_vacation', 'on') %}
            mdi:airplane-takeoff
          {% endif %}

############################################################################
## Binary Sensor
############################################################################

binary_sensor:
  - platform: template
    sensors:
      occupancy:
        friendly_name: "Occupancy"
        entity_id: sensor.occupancy
        value_template: >-
          {{ is_state('sensor.occupancy', 'home') 
            or is_state('sensor.occupancy', 'away')
            or is_state('sensor.occupancy', 'asleep')
            or is_state('sensor.occupancy', 'vacation') }}
        icon_template: >-
          {% if is_state('sensor.occupancy', 'home') %}
            mdi:home-account
          {% elif is_state('sensor.occupancy', 'away') %}
            mdi:exit-run
          {% elif is_state('sensor.occupancy', 'asleep') %}
            mdi:sleep
          {% elif is_state('sensor.occupancy', 'vacation') %}
            mdi:airplane-takeoff
          {% endif %}

############################################################################
## Automation
############################################################################

automation:

  # schakel de verlichting uit tussen 23:00 en 23:30 als we op vakantie zijn
  - alias: Schakel verlichting uit als op vakantie
    trigger:
      - platform: time
        at: '23:00:00'
    condition:
      - condition: state
        entity_id: sensor.occupancy
        state: 'vacation'
    action:
      # wacht tussen 0 en 29 minuten
      - delay: '{{ "0:" ~ ((range(0,29)|random)|int) ~ ":0" }}'
      - service: light.turn_off
        entity_id: group.dusk_living_lights
      - service: notify.admin
        data_template:
          title: 'Vakantie'
          message: 'Verlichting automatisch uitgeschakeld.'

  # notify when vacation enabled, and daily when still in vacation mode
  - alias: Notify Vacation Enabled
    trigger:
      - platform: state
        entity_id: sensor.occupancy
        to: 'vacation'
      - platform: time
        at: '9:00:00'
    condition:
      - condition: state
        entity_id: sensor.occupancy
        state: 'vacation'
    action:
      - service: notify.admin
        data_template:
          title: 'Vakantie'
          message: 'Vakantiemodus is ingeschakeld'

  - alias: Occupancy Sync
    initial_state: true
    trigger:
      - platform: state
        entity_id: 
          - input_boolean.occupancy_home
          - input_boolean.occupancy_away
          - input_boolean.occupancy_asleep
          - input_boolean.occupancy_vacation
        to: 'on'
    action:
      - service: input_boolean.turn_off
        data_template:
          entity_id: >
            {% set booleans = [ 'input_boolean.occupancy_home', 'input_boolean.occupancy_away', 'input_boolean.occupancy_asleep', 'input_boolean.occupancy_vacation' ] | reject('equalto', trigger.entity_id) %}
            {{ booleans | list | join(', ') }}
