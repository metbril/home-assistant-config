---
############################################################################
## Packages / Logger
## Realtime Debugging
############################################################################

homeassistant:
  customize_glob:
    "input_select.log_*":
      icon: hass:bug
      hidden: False

  customize:

    ########################################################################
    ## Node Anchors
    ########################################################################

    package.node_anchors:
      customize: &customize
        package: 'logger'

############################################################################
## Logger
############################################################################

logger:
  default: warn
  # logs:
  #   RFXtrx: debug

############################################################################
## Input Select
############################################################################

## Last state will be restored at start

input_select:
  log_level:
    name: Log Level
    options:
      - critical
      - fatal
      - error
      - warning
      - warn
      - info
      - debug
      - notset

############################################################################
## Automation
############################################################################
automation:

  ##  Dynamically set log level without editing configuration and restart
  - alias: Log Level
    trigger:
      - platform: state
        entity_id:
          - input_select.log_level
    action:
      - service: logger.set_level
        data:
          homeassistant.components: "{{ states('input_select.log_level') }}"
      - service: notify.admin
        data:
          message: 'Logging is ingesteld op "{{ states(''input_select.log_level'') }}"'
