blueprint:
  name: Text-to-Speech on Sonos
  description: 'This blueprint is used to add a script that will say messages on Sonos
    speakers. The script handles oddities to ensure a proper experience including
    saving/restore state, handling speaker groups, pausing music, disabling repeat,
    adding delays, etc.

    I recommend setting the mode to parallel if you will use this script on more than
    one speaker.'
  domain: script
  input:
    tts_service_name:
      name: Text-To-Speech Service Name
      description: The text-to-speech service to use when saying the message. This
        must match your Home Assistant configuration.
      default: google_translate_say
      selector:
        text: {}
    tts_language:
      name: Language
      description: The language to use with the text-to-speech service.
      default: en
      selector:
        text: {}
  source_url: https://github.com/Talvish/home-assistant-blueprints/blob/main/script/sonos_say.yaml
fields:
  entity_id:
    description: The entity id of the Sonos speaker that will play the message.
    name: Entity
    required: true
    selector:
      entity:
        domain: media_player
        integration: sonos
  message:
    description: The text that will be played.
    name: Message
    required: true
    selector:
      text:
  volume_level:
    name: Volume Level
    description: Float for volume level. Range 0..1. If value isn't given, volume
      isn't changed. The volume will revert to the previous level after it plays the
      message.
    required: false
    selector:
      number:
        min: 0
        max: 1
        step: 0.01
        mode: slider
  max_wait:
    name: Maximum Wait
    description: The maximum number of seconds that the system will wait for the message
      to play before continuing with the script. If the value is too short, the message
      may get cut off. If this value isn't given, the system will calculate a value
      based on the length of the string. This is likely fine for languages such as
      English and French, but likely too short for languages such as Chinese.
    required: false
    selector:
      number:
        min: 1
        max: 60
        step: 0.25
        unit_of_measurement: seconds
        mode: slider
variables:
  entity_group_leader: "{# we see if in a group since the repeat is typically controlled
    by it #} {# we use this for doing all the work since it is the primary speaker
    #} {# and everything will be shared across speakers anyhow #} {%- set group_members
    = state_attr( entity_id, \"group_members\" ) -%} {%- if group_members == None
    -%}\n  {# we maybe on an older version of HA, so look for a different group name#}\n
    \ {%- set group_members = state_attr( entity_id, \"sonos_group\" ) -%}\n  {%-
    if group_members == None -%}\n    {{ entity_id }}\n  {%- else -%}\n    {{ group_members[0]
    }}\n  {%- endif -%}\n{%- else -%}\n  {# the first seems to be the control, at
    least on Sonos #}\n  {{ group_members[0] }}\n{%- endif -%}"
  entity_repeat_state: "{# we grab the repeat state so that if in repeat mode we turn
    off #} {# and also sanity check that we got a value otherwise default to off #}
    {%- set repeat = state_attr( entity_group_leader, \"repeat\" ) -%} {%- if repeat
    == None -%}\n  off\n{%- else -%}\n  {{ repeat }}\n{%- endif -%}"
  tts_hack: !input tts_service_name
  tts_engine: "{%- if tts_hack is undefined or tts_hack== None or tts_hack == \"\"
    -%}\n  tts.google_translate_say\n{%- else -%}\n  tts.{{ tts_hack }}\n{%- endif
    -%}"
  lang_hack: !input tts_language
  tts_language: "{%- if lang_hack is undefined or lang_hack== None or lang_hack ==
    \"\" -%}\n  \"en\"\n{%- else -%}\n  {{ lang_hack }}\n{%- endif -%}"
  fixed_delay: '{# we use a rough estimate of speaking 16 characters per second, which
    is #} {# high, but we put min of 1 second and max of 4 regardless for the fixed
    delay #} {# this fixed delay seems to increase the chance of proper playback #}
    {% set delay = ( message | length ) / 16 %} {{ delay if ( delay >= 1 and delay
    <= 4 ) else 4 if delay >= 4 else 1 }}'
  wait_delay: "{%- if max_wait is undefined or max_wait == None or not (max_wait is
    number) -%}\n  {# if we have a bad or missing max_wait then we calculate something
    based  #}\n  {# on the number of characters, which is great more for western languages
    #}\n  {# others may get cut off #}\n  {% set delay = ( ( message | length ) /
    10 ) - fixed_delay %}\n  {{ delay if delay >= 1 else 1 }}\n{%- elif max_wait <
    1 -%}\n  1\n{%- else -%}\n  {{ max_wait }}\n{%- endif -%}"
sequence:
- service: sonos.snapshot
  data:
    entity_id: '{{ entity_group_leader }}'
    with_group: true
- choose:
  - conditions: '{{ volume_level is defined }}

      '
    sequence:
    - choose:
      - conditions:
        - condition: template
          value_template: '{{ is_state(entity_group_leader, ''playing'') }}

            '
        sequence:
        - service: media_player.media_pause
          data:
            entity_id: '{{ entity_group_leader }}

              '
        - wait_template: '{{ states( entity_id ) != ''playing'' }}'
          timeout:
            seconds: 2
      default: []
    - service: media_player.volume_set
      data:
        volume_level: '{{ volume_level }}'
        entity_id: '{{ entity_id }}'
- choose:
  - conditions: '{{ entity_repeat_state != "off" }}

      '
    sequence:
    - service: media_player.repeat_set
      data:
        repeat: 'off'
        entity_id: '{{ entity_group_leader }}'
    - wait_template: '{{ state_attr( entity_group_leader, ''repeat'' ) == ''off''
        }}'
      timeout:
        seconds: 4
  default: []
- service: '{{ tts_engine }}'
  data:
    entity_id: '{{ entity_group_leader }}'
    message: '{{ message }}'
    language: '{{ tts_language }}'
- service: media_player.repeat_set
  data:
    repeat: 'off'
    entity_id: '{{ entity_group_leader }}'
- wait_template: '{{ states( entity_id ) == ''playing'' }}'
  timeout:
    seconds: 2
- delay:
    seconds: '{{ fixed_delay | int }}

      '
    milliseconds: '{{ ( ( fixed_delay - ( fixed_delay | int ) ) * 1000 ) | int }}

      '
- wait_template: '{{ states( entity_id ) != ''playing'' }}'
  timeout:
    seconds: '{{ wait_delay | int }}

      '
    milliseconds: '{{ ( ( wait_delay - ( wait_delay | int ) ) * 1000 ) | int }}

      '
- service: sonos.restore
  data:
    entity_id: '{{ entity_group_leader }}'
    with_group: true
mode: parallel
max_exceeded: silent
icon: mdi:account-voice
