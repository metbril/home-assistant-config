---
## MS Teams
- binary_sensor:
    - name: "Robert In Call"
      unique_id: aeed7e2e-2d9c-45d2-a2d1-2c9cfc54a5a0
      state: >-
        {{ states("input_text.teams_status_robert") in ["OnThePhone","Presenting"] }}
      icon: >-
        {{ "mdi:phone-in-talk" if is_state('binary_sensor.robert_in_call','on') else "mdi:phone-off" }}

## Buienalarm
# This sensor switches on if the current or forecasted precipitation
# is greater than zero.
#
- binary_sensor:
    - name: Buienalarm
      unique_id: d8dabef5-3b3d-46d1-9062-3feb07c7c4a9
      availability: >-
        {{ states('sensor.buienalarm') is not none }}
      state: >-
        {{ state_attr('sensor.buienalarm','index') > 0 }}
      icon: >-
        mdi:umbrella{% if this.state == 'off' %}-closed{% endif %}

- sensor:
    - name: Buienalarm
      unique_id: fce67c62-f0b7-4806-81bc-4d494d59d4fd
      icon: mdi:weather-pouring
      availability: >
        {{ (states('sensor.buienalarm_precipitation_forecast_average') is not none) or
          (states('sensor.buienalarm_precipitation') is not none) }}
      state: >-
        {{ ['Geen neerslag','Lichte neerslag','Matige neerslag',
        'Zware neerslag','Zware buien'][this.attributes.index] }}
      attributes:
        index: >
          {% set forecast = states('sensor.buienalarm_precipitation_forecast_average') | float(0) %}
          {% set current  = states('sensor.buienalarm_precipitation') | float(0) %}
          {% set value    = [forecast, current] | max %}
          {% if value < 0.1 %}
            0
          {% elif value < 1 %}
            1
          {% elif value < 3 %}
            2
          {% elif value < 10 %}
            3
          {% elif value >=10 %}
            4
          {% endif %}

## Washing Machine

- binary_sensor:
    # Appliance is running when power usage detected
    - name: "Washing Machine Running"
      unique_id: 7a04404c-be07-4651-82d1-74a804d5cf25
      state: "{{ states('sensor.washing_machine_power') | float(0) > 4 }}"
      delay_off:
        seconds: 30
      icon: >
        mdi:washing-machine{{ '-off' if (this.state == 'off') }}

# Save time and energy meter when washing machine running finishes.
- trigger:
    - platform: state
      entity_id: binary_sensor.washing_machine_running
      from:
        - "on"
      to:
        - "off"
  sensor:
    - name: "Washing Machine Finish Time"
      unique_id: "b55d795b-e8f0-403f-b777-7bacecef66ea"
      icon: mdi:clock
      device_class: timestamp
      state: "{{ now() }}"

    - name: "Washing Machine Finish Energy"
      unique_id: "41ecee32-cf16-4ba7-95ab-574b84855e94"
      icon: mdi:lightning-bolt
      unit_of_measurement: kWh
      device_class: energy
      state: "{{ states('sensor.washing_machine_energy') }}"

# Save time and energy meter when washing machine running starts.
- trigger:
    - platform: state
      entity_id: binary_sensor.washing_machine_running
      from:
        - "off"
      to:
        - "on"
  sensor:
    - name: "Washing Machine Start Time"
      unique_id: "632cecf0-6e54-41c3-87d9-7b9bcbca4242"
      icon: mdi:clock
      device_class: timestamp
      state: "{{ now() }}"

    - name: "Washing Machine Start Energy"
      unique_id: "15b7d78f-c7de-4311-8477-d67ef82b1c22"
      icon: mdi:lightning-bolt
      unit_of_measurement: kWh
      device_class: energy
      state: "{{ states('sensor.washing_machine_energy') }}"

## Tumble Dryer
#
# Appliance is on when power usage detected
- binary_sensor:
    - name: "Tumble Dryer Running"
      unique_id: e266f060-376f-4067-8b9d-c8a21e49f890
      state: "{{ states('sensor.tumble_dryer_power') | float(0) > 2.5 }}"
      delay_on:
        seconds: 30
      delay_off:
        seconds: 55
      icon: "mdi:tumble-dryer{{ '-off' if (this.state == 'off') }}"

- sensor:
    - name: Living TV Volume Level
      unique_id: 655f97da-54dc-40d2-8de1-db1b9cc66bf3
      unit_of_measurement: "%"
      availability: >-
        {{ state_attr('media_player.living_tv','volume_level') is not none }}
      state: >-
        {{ (state_attr('media_player.living_tv','volume_level')
          | float(0) * 100) | int }}
      icon: >-
        {% set state = states('sensor.living_tv_volume_level') | float(0) %}
        {% if state == 0.0 %} mdi:volume-off
        {% elif state <= 0.3 %} mdi:volume-low
        {% elif state <= 0.6 %} mdi:volume-medium
        {% else %} mdi:volume-high
        {% endif %}

# UV Protection Window
# To save on API calls with OpenUV, get times daily just once, and then calculate every minute locally.
- trigger:
    - platform: time_pattern
      # This will update every 5 minutes
      minutes: "/5"
    - platform: state
      entity_id: binary_sensor.protection_window
    - platform: homeassistant
      event: start
  binary_sensor:
    - name: UV Protection Window
      unique_id: "1fed4c80-a646-4133-961c-776da75f1624"
      icon: mdi:sunglasses
      device_class: safety
      state: >-
        {% if states('binary_sensor.bescherming_venster') == 'unknown' %}
          false
        {% else %}
          {% set now = now() | as_timestamp | float(0) %}
          {% set lower = state_attr('binary_sensor.bescherming_venster','start_time') | as_timestamp | float(0) %}
          {% set upper = state_attr('binary_sensor.bescherming_venster','end_time') | as_timestamp | float(0) %}
          {{ (lower <= now <= upper) }}
        {% endif %}
