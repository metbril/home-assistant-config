---
##############################################################################
## Generic Sonos say script
##############################################################################
alias: "Sonos Text-To-Speech"
description: "Text to speech for Sonos devices."
mode: queued
fields:
  entity_id:
    name: Entity
    description: "The media player that speeks the text"
    example: 'media_player.woonkamer'
    required: true
    selector:
      entity:
        domain:
          - media_player
        integration: sonos
        multiple: false
  message:
    name: Message
    description: "The message to speak"
    example: 'Hallo wereld!'
    required: true
    selector:
      text:
        multiline: true
        type: text
  volume_percent:
    name: Volume
    description: "Volume of the spoken text, Range 0..1"
    example: "0.3"
    default: 30
    selector:
      number:
        min: 0
        max: 100
        step: 1
        unit_of_measurement: "%"
        mode: slider
  delay:
    description: "The time in seconds to wait until the media player state is restored. This is the duration of the spoken text."
    example: "3"
    default: 5

variables:
  volume_level: >-
    {% if (volume_percent is none) or (volume_percent is undefined) or (volume_percent == "") %}
      0.3
    {% else %}
      {{ (volume_percent / 100) | float(0) }}
    {% endif %}
  is_playing: "{{ is_state(entity_id, 'playing') }}"
  media: "{{ state_attr(entity_id,'media_content_id') }}"
  is_cloud: "{{ (media.split(':')[0] == 'x-sonos-vli') }}"
  cannot_restore: "{{ is_playing and is_cloud }}"

sequence:
  - service: sonos.snapshot
    data:
      entity_id: "{{ entity_id }}"

  - service: media_player.unjoin
    data:
      entity_id: "{{ entity_id }}"

  - service: media_player.media_pause
    data:
      entity_id: "{{ entity_id }}"

  - service: media_player.volume_set
    data:
      entity_id: "{{ entity_id }}"
      volume_level: "{{ volume_level }}"

  - service: tts.cloud_say
    data:
      entity_id: "{{ entity_id }}"
      message: "{{ message }}"

  - alias: Wait for text parsing
    delay: 1

  - alias: Wait until text is finished, or max 30 seconds
    wait_template: "{{ is_state( entity_id,'paused') }}"
    timeout: 30

  - service: sonos.restore
    data:
      entity_id: "{{ entity_id }}"
