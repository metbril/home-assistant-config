############################################################
# Concept by @basnijholt
# https://github.com/basnijholt/home-assistant-config/blob/master/scripts.yaml
#
alias: "Appliances: appliance started or finished"
id: b2b10f8b-811d-4d38-930f-9961f6c3ecaf
mode: parallel

trigger:
  - platform: state
    entity_id:
      # add more entities as appropriate
      - binary_sensor.washing_machine
      - binary_sensor.tumble_dryer

variables:
  from_state: "{{ trigger.from_state.state }}"
  to_state: "{{ trigger.to_state.state }}"
  name: "{{ trigger.entity_id.split('.', 1)[1] }}"

condition: >
  {{ (to_state == 'on' and from_state == 'off') or
    (to_state == 'off' and from_state == 'on') }}

action:
  - service: input_datetime.set_datetime
    target:
      entity_id: "input_datetime.{{ name }}_{{ to_state }}"
    data:
      timestamp: "{{ now().timestamp() }}"

  - service: input_number.set_value
    target:
      entity_id: "input_number.{{ name }}_{{ to_state }}"
    data:
      value: "{{ states('sensor.' ~ name ~ '_energy') | float(0) }}"

  - condition: template
    value_template: "{{ to_state == 'off' }}"
    alias: "Appliance off"

  - variables:
      binary_sensor: "{{ 'binary_sensor.{}'.format(name) }}"
      energy_on_sensor: "{{ 'input_number.{}_on'.format(name) }}"
      energy_off_sensor: "{{ 'input_number.{}_off'.format(name) }}"
      time_on_sensor: "{{ 'input_datetime.{}_on'.format(name) }}"
      time_off_sensor: "{{ 'input_datetime.{}_off'.format(name) }}"
  - variables:
      start_time: "{{ states(time_on_sensor) | as_timestamp }}"
      end_time: "{{ states(time_off_sensor) | as_timestamp }}"
      start_kwh: "{{ states(energy_on_sensor) | float(0) }}"
      end_kwh: "{{ states(energy_off_sensor) | float(0) }}"
  - variables:
      total_time: "{{ (end_time - start_time) }}"
      total_kwh: "{{ end_kwh - start_kwh }}"
  - variables:
      friendly_name: "{{ state_attr( binary_sensor, 'friendly_name') }}"
      minutes: "{{ (total_time / 60) | round(0) }}"
      total_kwh_rounded: "{{ (total_kwh) | round(2) }}"
      price: "{{ (states('sensor.energy_rate_tarif_2') | float(0) * total_kwh) | round(2) }}"
      price_formatted: "{{'{:0.2f}'.format(price)|replace('.', ',') }}"

  - service: notify.robert
    data:
      title: "Apparatuur"
      message: >-
        {{ friendly_name }} is klaar na {{ minutes }} minuten
        en verbruikte {{ total_kwh_rounded }} kWh
        (â‚¬{{ price_formatted }}).
